7- Split
import cv2
import numpy as np
import matplotlib.pyplot as plt
img = cv2.imread("butter.webp")
height,width = img.shape[:2]
quad1 = img[:height//2,:width//2]
quad2 = img[:height//2,width//2:]
quad3 = img[height//2:,:width//2]
quad4 = img[height//2:,width//2:]

plt.figure(figsize=(10,5))
plt.subplot(3,2,1)
plt.imshow(quad1)
plt.title("1")
plt.axis("off")

plt.subplot(3,2,2)
plt.imshow(quad2)
plt.title("2")
plt.axis("off")

plt.figure(figsize=(10,5))
plt.subplot(3,2,3)
plt.imshow(quad3)
plt.title("3")
plt.axis("off")

plt.subplot(3,2,4)
plt.imshow(quad4)
plt.title("4")
plt.axis("off")
plt.show()

8. Translate
import cv2
import numpy as np
img = cv2.imread("butter.webp")

def translate(img,tx,ty):
  row,col=img.shape[:2]
  matrix=np.float32([[1,0,tx],[0,1,ty]])
  return cv2.warpAffine(img,matrix,(row,col))
 
def scale(img,fx,fy):
  return cv2.resize(img,None,fx=fx,fy=fy)

def rotate(img,angle):
  height,width=img.shape[:2]
  center = (width//2,height//2)
  matrix=cv2.getRotationMatrix2D(center,angle,1.0)
  return cv2.warpAffine(img,matrix,(height,width))

tx = int(input("enter x traslation"))
ty = int(input("enter y traslation"))
fx=int(input("enter scale in x"))
fy = int(input("Enter scale in y"))
angle = float(input("enter angle"))

translated=translate(img,tx,ty)
scaled= scale(img,fx,fy)
rotated=rotate(img,angle)
cv2.imwrite("tran.jpeg",img)
cv2.imshow("Translated image",translated)
cv2.imshow("Scaled image",scaled)
cv2.imshow("Roatated image",rotated)
cv2.waitKey(0)
cv2.destroyAllWindows()

9.9. Edges
import cv2
import numpy as np
img = cv2.imread("butter.webp")
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(gray,100,200)
kernel = np.ones((5,5),np.float32)/25
textures = cv2.filter2D(gray,-1,kernel)
cv2.imshow("Gray",gray)
cv2.imshow("Edges",edges)
cv2.imshow("Textures",textures)
cv2.waitKey(0)
cv2.destroyAllWindows()

10.Blur&Smooth
import cv2
import numpy as np
img = cv2.imread("scen.jpeg")

def smooth(img,kernel_size):
  return cv2.GaussianBlur(img,(kernel_size,kernel_size),0)
def blur(img,kernel_size):
  return cv2.medianBlur(img,kernel_size)
kernel1=int(input("Enter kernel1 size for smothing"))
kernel2=int(input("Enter kernel2 for blurring"))
if kernel1 % 2 == 0:
  kernel1 += 1
if kernel2 % 2 == 0:
  kernel2 += 1

smoothImg = smooth(img,kernel1)
blurrImg = blur(img,kernel2)
cv2.imshow("Original",img)
cv2.imshow("Smooth image",smoothImg)
cv2.imshow("Blurr Image",blurrImg)
cv2.waitKey(0)
cv2.destroyAllWindows()

11. Contour
import cv2
import numpy as np
img = cv2.imread("scen.jpeg")
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
_,binary_image=cv2.threshold(gray,127,255,cv2.THRESH_BINARY)
contours,_ = cv2.findContours(binary_image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(img,contours,-1,(0,255,0),3)
cv2.imshow("Contours",img)
cv2.waitKey(0)
cv2.destroyAllWindows()

12. Face
import cv2
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades+"haarcascade_frontalface_default.xml")
img = cv2.imread("facess.jpeg")
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
face = face_cascade.detectMultiScale(gray,scaleFactor=1.3,minNeighbors=5)
for(x,y,w,h) in face:
  cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
cv2.imwrite("Detected.jpeg",img)
cv2.imshow("FacesDetected",img)
cv2.waitKey(0)
cv2.destroyAllWindows()